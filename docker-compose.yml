version: '3.9'

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile
  user: "${AIRFLOW_UID:-50000}:0"
  env_file:
    - .env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    AIRFLOW_CONN_MINIO_DEFAULT: s3://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@minio:9000/?host=http://minio:9000
    JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
  volumes:
    - ./airflow/dags:/opt/airflow/dags:rw
    - ./airflow/logs:/opt/airflow/logs:rw
    - ./airflow/plugins:/opt/airflow/plugins:rw
    - ./airflow/config:/opt/airflow/config:ro
    - ./spark/include:/opt/airflow/includes
    - airflow-volume:/opt/airflow/airflow-data
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - data-pipeline-net

services:
  postgres:
    image: postgres:14
    container_name: postgres_airflow
    hostname: postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - data-pipeline-net

  minio:
    image: minio/minio:latest
    container_name: minio
    hostname: minio
    env_file:
      - .env
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data-volume:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS:-}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - data-pipeline-net

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e
        airflow db init
        airflow users create --username ${AIRFLOW_USER} --password ${AIRFLOW_PASSWORD} --firstname Admin --lastname User --role Admin --email admin@example.com || true

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    command: airflow webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    command: airflow scheduler
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--limit", "1"]
      interval: 60s
      timeout: 30s
      retries: 3
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/data:/data
      - ./spark/include:/opt/airflow/includes
  spark-master:
    image: bitnami/spark:3.4
    container_name: spark_master
    hostname: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - ./spark/include:/opt/airflow/includes
      - ./spark/spark-apps:/opt/bitnami/spark/apps
      - ./spark/spark-data:/opt/bitnami/spark/data
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: 'no'
      SPARK_RPC_ENCRYPTION_ENABLED: 'no'
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: 'no'
      SPARK_SSL_ENABLED: 'no'
      SPARK_CONF_fs_s3a_access_key: ${MINIO_ROOT_USER}
      SPARK_CONF_fs_s3a_secret_key: ${MINIO_ROOT_PASSWORD}
      SPARK_CONF_fs_s3a_endpoint: http://minio:9000
      SPARK_CONF_fs_s3a_path__style__access: "true"
      SPARK_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_CONF_spark_hadoop_fs_s3a_aws_credentials_provider: org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider
    networks:
      - data-pipeline-net

  # spark-worker-1:
  #   image: bitnami/spark:3.4
  #   container_name: spark_worker-1
  #   command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  #   depends_on:
  #     - spark-master
  #     - minio
  #   ports:
  #     - "8084:8081"
  #   volumes:
  #     - ./spark/include:/opt/airflow/includes
  #     - ./spark/spark-apps:/opt/bitnami/spark/apps
  #     - ./spark/spark-data:/opt/bitnami/spark/data
  #   environment:
  #     SPARK_MODE: worker
  #     SPARK_MASTER_URL: spark://spark-master:7077
  #     SPARK_WORKER_MEMORY: 1G
  #     SPARK_WORKER_CORES: 1
  #     SPARK_RPC_AUTHENTICATION_ENABLED: 'no'
  #     SPARK_RPC_ENCRYPTION_ENABLED: 'no'
  #     SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: 'no'
  #     SPARK_SSL_ENABLED: 'no'
  #     SPARK_CONF_fs_s3a_access_key: ${MINIO_ROOT_USER}
  #     SPARK_CONF_fs_s3a_secret_key: ${MINIO_ROOT_PASSWORD}
  #     SPARK_CONF_fs_s3a_endpoint: http://minio:9000
  #     SPARK_CONF_fs_s3a_path__style__access: "true"
  #     SPARK_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
  #     SPARK_CONF_spark_hadoop_fs_s3a_aws_credentials_provider: org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider
    
  #   networks:
  #     - data-pipeline-net

  # spark-worker-2:
  #   image: bitnami/spark:3.4
  #   container_name: spark_worker-2
  #   command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  #   depends_on:
  #     - spark-master
  #     - minio
  #   ports:
  #     - "8083:8081"
  #   volumes:
  #     - ./spark/include:/opt/airflow/includes
  #     - ./spark/spark-apps:/opt/bitnami/spark/apps
  #     - ./spark/spark-data:/opt/bitnami/spark/data
  #   environment:
  #     SPARK_MODE: worker
  #     SPARK_MASTER_URL: spark://spark-master:7077
  #     SPARK_WORKER_MEMORY: 2G
  #     SPARK_WORKER_CORES: 2
  #     SPARK_RPC_AUTHENTICATION_ENABLED: 'no'
  #     SPARK_RPC_ENCRYPTION_ENABLED: 'no'
  #     SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: 'no'
  #     SPARK_SSL_ENABLED: 'no'
  #     SPARK_CONF_fs_s3a_access_key: ${MINIO_ROOT_USER}
  #     SPARK_CONF_fs_s3a_secret_key: ${MINIO_ROOT_PASSWORD}
  #     SPARK_CONF_fs_s3a_endpoint: http://minio:9000
  #     SPARK_CONF_fs_s3a_path__style__access: "true"
  #     SPARK_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
  #     SPARK_CONF_spark_hadoop_fs_s3a_aws_credentials_provider: org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider
  #   networks:
  #     - data-pipeline-net

  streamlit-app:
    image: python:3.9-slim
    container_name: streamlit_dashboard
    working_dir: /app
    volumes:
      - ./streamlit_app:/app
    ports:
      - "8501:8501"
    command: >
      sh -c "pip install --no-cache-dir streamlit pandas boto3 psycopg2-binary requests &&
             streamlit run app.py --server.port 8501 --server.address 0.0.0.0"
    networks:
      - data-pipeline-net
    environment:
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SPARK_MASTER: spark://spark-master:7077

networks:
  data-pipeline-net:
    driver: bridge

volumes:
  postgres-db-volume:
    driver: local
  minio-data-volume:
    driver: local
  airflow-volume:
    driver: local
